/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

var OutputChannel = xdc.useModule('OutputChannel');
// Technically, this check should branch on platform (Linux, TM4C123GH6PM),
// not on target, but Program.platform doesn't have the name.
if (Program.build.target.isa == "i686") {
    OutputChannel.ChannelProxy = xdc.useModule('ConsoleChannel');
}
else if (Program.build.target.name == "M4F") {
    var TivaUartChannel = xdc.useModule('TivaUartChannel');
    TivaUartChannel.sysUartIndex = 0;
    TivaUartChannel.eventUartIndex = 0; // can be same as sys uart index
    OutputChannel.ChannelProxy = TivaUartChannel;
} else {
    throw "No output channel available for platform/target: " +
        Program.build.platform.name + "/" + Program.build.target.name;
}

/* System output from System_printf */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 0x400;
SysMin.outputFxn = '&OutputChannel_outputStdOut';
System.SupportProxy = SysMin;

Defaults.common$.diags_ASSERT = Diags.ALWAYS_ON;
Defaults.common$.diags_INTERNAL = Diags.ALWAYS_ON;
Defaults.common$.diags_INFO = Diags.ALWAYS_ON;

var cfgArgs = Program.build.cfgArgs

var EventGen = xdc.useModule('EventGen');
EventGen.common$.diags_USER1 = Diags.ALWAYS_ON;

// Exclude event message format strings from final linked binary
Text.isLoaded = false;

if (cfgArgs.eventDest == "stream") {
    var EventRecord = xdc.useModule('eventstream.EventRecord');
    EventRecord.hasModuleId = true;

    var EventEncoder = xdc.useModule('eventstream.EventEncoder');
    EventEncoder.outputFunc = '&OutputChannel_outputEventLog';
    EventEncoder.binaryOutput = !Text.isLoaded;
}

var loggerInstance;

/* Branch on what kind of binary we were asked to build. Normally, an
 * application config would have only one of these clauses. We make this
 * configurable (by config script args (cfgArgs) set in package.bld), because
 * this app package is designed for experimenting with varios loggers. */

if (cfgArgs.eventLogger == "LoggerSys") {
    /* LoggerSys formats events and outputs via System_printf. The
     * eventstream.EventEncoder is not used. */
    if (cfgArgs.eventDest != "stdout")
        throw "Invalid cfg args: LoggerSys can output events only " +
              "to System_printf";
    var Logger = xdc.useModule('xdc.runtime.LoggerSys');
    loggerInstance = Logger.create();
}
else if (cfgArgs.eventLogger == "LoggerCallback") {
    /* LoggerCallback invokes a callback upon each event. */
    if (cfgArgs.eventDest != "stream")
        throw "Invalid cfg args: this app provides only an eventstream " +
              "callback for LoggerCallback";

    /* Workaround for the fact that LoggerCallback does not initialize
     * the Log.EventRec.tstamp field to ~0 like the other loggers, but leaves
     * it uninitialized), so the EventEncoder cannot tell whether timestamp
     * is present or not. We tell it explicitly here. */
    EventRecord.hasTimestamp = EventRecord.TimestampMode_NONE;

    var Logger = xdc.useModule('xdc.runtime.LoggerCallback');
    var LoggerCallbackAdapter = xdc.useModule('eventstream.LoggerCallbackAdapter');
    Logger.outputFxn = '&eventstream_LoggerCallbackAdapter_writeEvent';
    loggerInstance = Logger.create();
}
else if (cfgArgs.eventLogger == "LoggerBuf") {
    /* LoggerBuf accumulates events into a buffer. They are flushed from
     * the buffer upon app exit. In string mode, we let LoggerBuf format the
     * events and send them to System_printf. In binary mode, we use
     * eventstream.EventEncoder to encode the events and ship them to the
     * configured 'outputFunc' as raw bytes. Since LoggerBuf does not expose
     * on-flush callbacks, in binary mode instead of auto-flushing (which is
     * hardwired to System_printf) the app must explicitly invoke *
     * EventEncoder (upon exit, in idle loop, or wherever). */
    var Logger = xdc.useModule('xdc.runtime.LoggerBuf');
    var loggerParams = {};

    /* Auto-flush option flushes to System_printf upon exit. */
    if (cfgArgs.eventDest == "stdout") {
        Logger.enableFlush = true;
        loggerParams.exitFlush = true;
    }

    loggerInstance = Logger.create(loggerParams);

    /* When using EventEncoder, the app must explicitly call
     * LoggerBufAdapter_writeEvents(), since LoggerBuf does not expose any
     * callbacks upon flush. A prerequisite is to set loggerInstance. */
    if (cfgArgs.eventDest == "stream") {
        var LoggerBufAdapter = xdc.useModule('eventstream.LoggerBufAdapter');
        LoggerBufAdapter.loggerInstance = loggerInstance;
    }
}
else if (cfgArgs.eventLogger == "LoggerIdle") {
    /* TODO: Once EventDecoder supports LoggerIdle stream format, we would not
     * use EventEncoder with LoggerIdle. The outputToUART would be used here
     * directly. */

    if (cfgArgs.eventDest != "stream")
        throw "Invalid cfg args: this app supports only eventstream " +
              "transport for LoggerIdle";

    // Dependency that even though referenced by LoggerIdle, is not correctly
    // included (warnings about BIOS freq and linker errors).
    var BIOS = xdc.useModule("ti.sysbios.BIOS");

    var LoggerIdle = xdc.useModule('ti.uia.sysbios.LoggerIdle');
    var LoggerIdleAdapter = xdc.useModule('eventstream.LoggerIdleAdapter');
    LoggerIdle.bufferSize = 256;
    LoggerIdle.transportFxn = "&eventstream_LoggerIdleAdapter_writeEvents";
    LoggerIdle.transportType = LoggerIdle.TransportType_CUSTOM;
    LoggerIdle.customTransportType = "eventstream";
    LoggerIdle.isTimestampEnabled = true;
    loggerInstance = LoggerIdle.create();
} else {
    throw "Invalid cfg args: uknown logger '" + cfgArgs.eventLogger + "'";
}

Defaults.common$.logger = loggerInstance;

// TODO: should be posible to get rid of this, see eventstream/Settings.xdc
var eventstreamSettings = xdc.useModule("eventstream.Settings");
eventstreamSettings.eventLogger = cfgArgs.eventLogger;
